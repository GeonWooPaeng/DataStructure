1. 논리연산자/비트연산자 활용
(조건은 짧게 -> and,or,not 이용)
(<<,&,|,^ 이용)

2. 상태를 나타내는 자료 활용하기
(True, False 이용)

3. 나눠서 진행하기
(조건문 함수...)

4.여러자료구조와 메서드, 함수 활용하기
s == s[::-1]
len(set(lst)) == len(lst) 

5. 미리처리한 케이스와 처리할 케이스 정리하기 

6. 예제, 최소, 최대, 예외(조건 파악), 랜덤 케이스 만들기 


##############################################
방향벡터

dx = [-1,1,0,0]
dy = [0,0,1,-1]

반시계방향
dx = [0,-1,0,1]
dy = [1,0,-1,0]

시계방향
dx = [0,1,0,-1]
dy = [1,0,-1,0]

x+= dx['ENSW'.index(앞 문자열에 있는문자)]
y+= dy['ENSW'.find(way)]

###############################################
탐색의 개념과 유형

1.구현에 초점
- BFS/DFS, 백트래킹에 수 많은 조건
1) 부분 상태 탐색(위치 이동, 수) - 상태에 대한 체크 함수
2) 전체 상태 탐색(전체 map) - n차원 배열을 조정하는 방법 
3) Flood Fill 알고리즘
4) 트리 순회

2. 알고리즘 지식
1) 위상 정렬(Topological Sort)
2) 최소 신장 트리(MST)
3) 최단 거리
